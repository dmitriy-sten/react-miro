/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as BoardsIndexImport } from './routes/boards.index'
import { Route as BoardsIdImport } from './routes/boards.$id'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const BoardsIndexRoute = BoardsIndexImport.update({
  id: '/boards/',
  path: '/boards/',
  getParentRoute: () => rootRoute,
} as any)

const BoardsIdRoute = BoardsIdImport.update({
  id: '/boards/$id',
  path: '/boards/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/boards/$id': {
      id: '/boards/$id'
      path: '/boards/$id'
      fullPath: '/boards/$id'
      preLoaderRoute: typeof BoardsIdImport
      parentRoute: typeof rootRoute
    }
    '/boards/': {
      id: '/boards/'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof BoardsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/boards/$id': typeof BoardsIdRoute
  '/boards': typeof BoardsIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/boards/$id': typeof BoardsIdRoute
  '/boards': typeof BoardsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/boards/$id': typeof BoardsIdRoute
  '/boards/': typeof BoardsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/register' | '/boards/$id' | '/boards'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/boards/$id' | '/boards'
  id: '__root__' | '/login' | '/register' | '/boards/$id' | '/boards/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  BoardsIdRoute: typeof BoardsIdRoute
  BoardsIndexRoute: typeof BoardsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  BoardsIdRoute: BoardsIdRoute,
  BoardsIndexRoute: BoardsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/register",
        "/boards/$id",
        "/boards/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/boards/$id": {
      "filePath": "boards.$id.tsx"
    },
    "/boards/": {
      "filePath": "boards.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
